// Code generated by go-enum
// DO NOT EDIT!

package button

import (
	"fmt"
)

const (
	// Filter1 is a Button of type Filter1.
	Filter1 Button = iota
	// Filter2 is a Button of type Filter2.
	Filter2
	// Filter3 is a Button of type Filter3.
	Filter3
	// Filter4 is a Button of type Filter4.
	Filter4
	// Volume1 is a Button of type Volume1.
	Volume1
	// Volume2 is a Button of type Volume2.
	Volume2
	// Volume3 is a Button of type Volume3.
	Volume3
	// Volume4 is a Button of type Volume4.
	Volume4
	// PadA1 is a Button of type PadA1.
	PadA1
	// PadA2 is a Button of type PadA2.
	PadA2
	// PadA3 is a Button of type PadA3.
	PadA3
	// PadA4 is a Button of type PadA4.
	PadA4
	// PadB1 is a Button of type PadB1.
	PadB1
	// PadB2 is a Button of type PadB2.
	PadB2
	// PadB3 is a Button of type PadB3.
	PadB3
	// PadB4 is a Button of type PadB4.
	PadB4
	// PadC1 is a Button of type PadC1.
	PadC1
	// PadC2 is a Button of type PadC2.
	PadC2
	// PadC3 is a Button of type PadC3.
	PadC3
	// PadC4 is a Button of type PadC4.
	PadC4
	// PadD1 is a Button of type PadD1.
	PadD1
	// PadD2 is a Button of type PadD2.
	PadD2
	// PadD3 is a Button of type PadD3.
	PadD3
	// PadD4 is a Button of type PadD4.
	PadD4
	// Mute1 is a Button of type Mute1.
	Mute1
	// Mute2 is a Button of type Mute2.
	Mute2
	// Mute3 is a Button of type Mute3.
	Mute3
	// Mute4 is a Button of type Mute4.
	Mute4
	// Dial is a Button of type Dial.
	Dial
	// SevenSegment is a Button of type SevenSegment.
	SevenSegment
	// Sync is a Button of type Sync.
	Sync
	// Quant is a Button of type Quant.
	Quant
	// Capture is a Button of type Capture.
	Capture
	// Shift is a Button of type Shift.
	Shift
	// Reverse is a Button of type Reverse.
	Reverse
	// Type is a Button of type Type.
	Type
	// Size is a Button of type Size.
	Size
	// Browse is a Button of type Browse.
	Browse
)

const _ButtonName = "Filter1Filter2Filter3Filter4Volume1Volume2Volume3Volume4PadA1PadA2PadA3PadA4PadB1PadB2PadB3PadB4PadC1PadC2PadC3PadC4PadD1PadD2PadD3PadD4Mute1Mute2Mute3Mute4DialSevenSegmentSyncQuantCaptureShiftReverseTypeSizeBrowse"

var _ButtonMap = map[Button]string{
	0:  _ButtonName[0:7],
	1:  _ButtonName[7:14],
	2:  _ButtonName[14:21],
	3:  _ButtonName[21:28],
	4:  _ButtonName[28:35],
	5:  _ButtonName[35:42],
	6:  _ButtonName[42:49],
	7:  _ButtonName[49:56],
	8:  _ButtonName[56:61],
	9:  _ButtonName[61:66],
	10: _ButtonName[66:71],
	11: _ButtonName[71:76],
	12: _ButtonName[76:81],
	13: _ButtonName[81:86],
	14: _ButtonName[86:91],
	15: _ButtonName[91:96],
	16: _ButtonName[96:101],
	17: _ButtonName[101:106],
	18: _ButtonName[106:111],
	19: _ButtonName[111:116],
	20: _ButtonName[116:121],
	21: _ButtonName[121:126],
	22: _ButtonName[126:131],
	23: _ButtonName[131:136],
	24: _ButtonName[136:141],
	25: _ButtonName[141:146],
	26: _ButtonName[146:151],
	27: _ButtonName[151:156],
	28: _ButtonName[156:160],
	29: _ButtonName[160:172],
	30: _ButtonName[172:176],
	31: _ButtonName[176:181],
	32: _ButtonName[181:188],
	33: _ButtonName[188:193],
	34: _ButtonName[193:200],
	35: _ButtonName[200:204],
	36: _ButtonName[204:208],
	37: _ButtonName[208:214],
}

// String implements the Stringer interface.
func (x Button) String() string {
	if str, ok := _ButtonMap[x]; ok {
		return str
	}
	return fmt.Sprintf("Button(%d)", x)
}

var _ButtonValue = map[string]Button{
	_ButtonName[0:7]:     0,
	_ButtonName[7:14]:    1,
	_ButtonName[14:21]:   2,
	_ButtonName[21:28]:   3,
	_ButtonName[28:35]:   4,
	_ButtonName[35:42]:   5,
	_ButtonName[42:49]:   6,
	_ButtonName[49:56]:   7,
	_ButtonName[56:61]:   8,
	_ButtonName[61:66]:   9,
	_ButtonName[66:71]:   10,
	_ButtonName[71:76]:   11,
	_ButtonName[76:81]:   12,
	_ButtonName[81:86]:   13,
	_ButtonName[86:91]:   14,
	_ButtonName[91:96]:   15,
	_ButtonName[96:101]:  16,
	_ButtonName[101:106]: 17,
	_ButtonName[106:111]: 18,
	_ButtonName[111:116]: 19,
	_ButtonName[116:121]: 20,
	_ButtonName[121:126]: 21,
	_ButtonName[126:131]: 22,
	_ButtonName[131:136]: 23,
	_ButtonName[136:141]: 24,
	_ButtonName[141:146]: 25,
	_ButtonName[146:151]: 26,
	_ButtonName[151:156]: 27,
	_ButtonName[156:160]: 28,
	_ButtonName[160:172]: 29,
	_ButtonName[172:176]: 30,
	_ButtonName[176:181]: 31,
	_ButtonName[181:188]: 32,
	_ButtonName[188:193]: 33,
	_ButtonName[193:200]: 34,
	_ButtonName[200:204]: 35,
	_ButtonName[204:208]: 36,
	_ButtonName[208:214]: 37,
}

// ParseButton attempts to convert a string to a Button
func ParseButton(name string) (Button, error) {
	if x, ok := _ButtonValue[name]; ok {
		return x, nil
	}
	return Button(0), fmt.Errorf("%s is not a valid Button", name)
}
