// Code generated by go-enum
// DO NOT EDIT!

package f1

import (
	"fmt"
)

const (
	// MaskKnobs is a MaskPreset of type MaskKnobs.
	MaskKnobs MaskPreset = iota
	// MaskPads is a MaskPreset of type MaskPads.
	MaskPads
	// MaskFunctions is a MaskPreset of type MaskFunctions.
	MaskFunctions
	// MaskVolumes is a MaskPreset of type MaskVolumes.
	MaskVolumes
	// MaskMutes is a MaskPreset of type MaskMutes.
	MaskMutes
	// MaskAll is a MaskPreset of type MaskAll.
	MaskAll
)

const _MaskPresetName = "MaskKnobsMaskPadsMaskFunctionsMaskVolumesMaskMutesMaskAll"

var _MaskPresetMap = map[MaskPreset]string{
	0: _MaskPresetName[0:9],
	1: _MaskPresetName[9:17],
	2: _MaskPresetName[17:30],
	3: _MaskPresetName[30:41],
	4: _MaskPresetName[41:50],
	5: _MaskPresetName[50:57],
}

// String implements the Stringer interface.
func (x MaskPreset) String() string {
	if str, ok := _MaskPresetMap[x]; ok {
		return str
	}
	return fmt.Sprintf("MaskPreset(%d)", x)
}

var _MaskPresetValue = map[string]MaskPreset{
	_MaskPresetName[0:9]:   0,
	_MaskPresetName[9:17]:  1,
	_MaskPresetName[17:30]: 2,
	_MaskPresetName[30:41]: 3,
	_MaskPresetName[41:50]: 4,
	_MaskPresetName[50:57]: 5,
}

// ParseMaskPreset attempts to convert a string to a MaskPreset
func ParseMaskPreset(name string) (MaskPreset, error) {
	if x, ok := _MaskPresetValue[name]; ok {
		return x, nil
	}
	return MaskPreset(0), fmt.Errorf("%s is not a valid MaskPreset", name)
}
