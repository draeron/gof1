// Code generated by go-enum
// DO NOT EDIT!

package layout

import (
	"fmt"
)

const (
	// FunctionsPressed is a HandlerType of type FunctionsPressed.
	FunctionsPressed HandlerType = iota
	// FunctionsHold is a HandlerType of type FunctionsHold.
	FunctionsHold
	// FunctionsReleased is a HandlerType of type FunctionsReleased.
	FunctionsReleased
	// PadPressed is a HandlerType of type PadPressed.
	PadPressed
	// PadHold is a HandlerType of type PadHold.
	PadHold
	// PadReleased is a HandlerType of type PadReleased.
	PadReleased
	// MutePressed is a HandlerType of type MutePressed.
	MutePressed
	// MuteHold is a HandlerType of type MuteHold.
	MuteHold
	// MuteReleased is a HandlerType of type MuteReleased.
	MuteReleased
	// DialPressed is a HandlerType of type DialPressed.
	DialPressed
	// DialHold is a HandlerType of type DialHold.
	DialHold
	// DialReleased is a HandlerType of type DialReleased.
	DialReleased
)

const _HandlerTypeName = "FunctionsPressedFunctionsHoldFunctionsReleasedPadPressedPadHoldPadReleasedMutePressedMuteHoldMuteReleasedDialPressedDialHoldDialReleased"

var _HandlerTypeMap = map[HandlerType]string{
	0:  _HandlerTypeName[0:16],
	1:  _HandlerTypeName[16:29],
	2:  _HandlerTypeName[29:46],
	3:  _HandlerTypeName[46:56],
	4:  _HandlerTypeName[56:63],
	5:  _HandlerTypeName[63:74],
	6:  _HandlerTypeName[74:85],
	7:  _HandlerTypeName[85:93],
	8:  _HandlerTypeName[93:105],
	9:  _HandlerTypeName[105:116],
	10: _HandlerTypeName[116:124],
	11: _HandlerTypeName[124:136],
}

// String implements the Stringer interface.
func (x HandlerType) String() string {
	if str, ok := _HandlerTypeMap[x]; ok {
		return str
	}
	return fmt.Sprintf("HandlerType(%d)", x)
}

var _HandlerTypeValue = map[string]HandlerType{
	_HandlerTypeName[0:16]:    0,
	_HandlerTypeName[16:29]:   1,
	_HandlerTypeName[29:46]:   2,
	_HandlerTypeName[46:56]:   3,
	_HandlerTypeName[56:63]:   4,
	_HandlerTypeName[63:74]:   5,
	_HandlerTypeName[74:85]:   6,
	_HandlerTypeName[85:93]:   7,
	_HandlerTypeName[93:105]:  8,
	_HandlerTypeName[105:116]: 9,
	_HandlerTypeName[116:124]: 10,
	_HandlerTypeName[124:136]: 11,
}

// ParseHandlerType attempts to convert a string to a HandlerType
func ParseHandlerType(name string) (HandlerType, error) {
	if x, ok := _HandlerTypeValue[name]; ok {
		return x, nil
	}
	return HandlerType(0), fmt.Errorf("%s is not a valid HandlerType", name)
}
